= Contagem de objetos
:source-highlighter: pygments
Fellipe Leandro <faugusto12@gmail.com> ; Jessika Cristina <jessika@gmail.com>

== Definição do problema
O problema consiste em determinar a quantidade de objetos em uma cena. No caso em questão, os objetos assumem o formato de bolhas. Deve-se sugerir um algoritmo de processamento digital de imagens para realizar a contagem das bolhas.

.Cena com objetos a serem contados
image::../imgs/bolhas.png[]

== Solução proposta

A solução proposta baseia-se no algoritmo _SeedFill_ ou _Floodfill_ . Os principal conceito de Processamento Digital de Imagens utilizado nesse algoritmo é o de vizinhança. A vizinhança de um pixel (x,y) consiste em pixels que só diferem de uma posição na coordenada vertical e/ou horizontal. A partir disso, são definidas alguns tipos de vizinhança, como 4-vizinhos, D-vizinhos (vizinhos da diagonal) e 8-vizinhos. Para o algoritmo proposto, usou-se a abordagem de 4-vizinhança.

No algoritmo _SeedFill_ , varre-se a imagem até que se chegue a um pixel da tonalidade desejada.Define-se então esse pixel como semente, e seus vizinhos analisados para detectar se estes possuem a mesma tonalidade de cinza que a semente, bem como rotulados (atribuindo-se um certo nível de cinza). Caso isso ocorra, estes pixels são  salvos em uma estrtura de dados do tipo fila, para posteriormente, assumirem o papel de semente.
O processo é então repetido com a nova semente até que não haja mais vizinhos de mesmo 'rótulo', e então, temos a contagem de 1 objeto.

A biblioteca _OpenCV_ já possui uma implementação do algoritmo _SeedFill_. Entretanto, nós escolhemos implementar o algoritmo manualmente, para que houvesse maior entendimento e domínio sobre a implementação. 



.main.cpp
[source,cpp]
----
#include <iostream>
#include <opencv2/opencv.hpp>
using namespace cv;
using namespace std;

int main()
{
    Mat image;
    int width,height;
    int nobj=0;
    int fila[80][2]={0};
    int fila_pos=0;
    int contfilaPos=0;
    image = imread("bolhas.png",CV_LOAD_IMAGE_GRAYSCALE);
    if(!image.data)
        cout<<"Nao abriu imagem"<<endl;
    namedWindow("janela1",WINDOW_AUTOSIZE);
    imshow("janela1", image);
    //waitKey();

    width = image.size().width;
    height = image.size().height;
    for(int i=0;i<height;i++){
        for(int j=0;j<width;j++){
        	//pixel encontrado é branco
            if(image.at<uchar>(i,j)==255){ 
            	//primeira posição da fila
                contfilaPos=0; 
                fila_pos=0;
                 //mais um objeto encontrado
                nobj++;      
                //primeiro elemento da  fila: semente
                fila[fila_pos][0]=i; 
                fila[fila_pos][1]=j;
                //rotular ponto, mudando-o de cor
                image.at<uchar>(fila[fila_pos][0],(fila[fila_pos][1]))=60; 
                //começar a busca por vizinhos (4-vizinhos)
                while(fila[0][0]!=-1){ 
					//vizinho da esquerda
                    if(image.at<uchar>(fila[fila_pos][0],fila[fila_pos][1]-1)==255){ 
                        image.at<uchar>(fila[fila_pos][0],(fila[fila_pos][1]-1))=15;
                        //fila_pos++;
                        //final da fila
                        contfilaPos++; 
                        //guardar posição do vizinho no final da fila
                        fila[contfilaPos][0]=fila[fila_pos][0]; 
                        fila[contfilaPos][1]=fila[fila_pos][1]-1;
                    }
                    //vizinho da direita
                    if(image.at<uchar>(fila[fila_pos][0],(fila[fila_pos][1]+1))==255){ 
                        //mudar cor
                        image.at<uchar>(fila[fila_pos][0],(fila[fila_pos][1]+1))=15;
                        //fila_pos++;
                        contfilaPos++;
                        fila[contfilaPos][0]=fila[fila_pos][0];
                        fila[contfilaPos][1]=fila[fila_pos][1]+1;
                    }
                    //vizinho de cima
                    if(image.at<uchar>(fila[fila_pos][0]+1,fila[fila_pos][1])==255){ 

                        //mudar cor
                        image.at<uchar>(fila[fila_pos][0]+1,fila[fila_pos][1])=15;
                        //fila_pos++;
                        contfilaPos++;
                        fila[contfilaPos][0]=fila[fila_pos][0]+1;
                        fila[contfilaPos][1]=fila[fila_pos][1];

                    }
                    //vizinho de baixo
                    if(image.at<uchar>(fila[fila_pos][0]-1,fila[fila_pos][1])==255){ 
                        //mudar cor
                        image.at<uchar>(fila[fila_pos][0]-1,fila[fila_pos][1])=15;
                        //fila_pos++
                        contfilaPos++;
                        fila[contfilaPos][0] = fila[fila_pos][0]-1;
                        fila[contfilaPos][1] = fila[fila_pos][1];
                    }
                    //implementa um 'pop' na fila. O vizinho passa  a ser nova semente
                    for(int aux=0;aux<contfilaPos&&aux<79;aux++){ 
                        if(aux==70){
                        	//alerta de que a fila esta quase preenchida
                            cout<<"Perigo"<<endl;
                        }
                        fila[aux][0]=fila[aux+1][0];
                        fila[aux][1]=fila[aux+1][1];

                    }
                    //gambiarra para o while
                    for(int aux1=contfilaPos;aux1<80;aux1++){ 
                            fila[aux1][0]=-1;
                            fila[aux1][1]=-1;

                        }
                    //para não pular uma posição na fila quando começar a proxima iteração
                    contfilaPos--; 
                    }


                }

            }

        }
    namedWindow("janela",WINDOW_AUTOSIZE);
    imshow("janela", image);
    imwrite("fill.png", image);
    waitKey();
    cout<<"Numero de bolhas: "<<nobj<<endl;
        return 0;
    }

----
== Resultados e Considerações Finais
A seguir temos a saída do programa

.Cena após a rotulação para a contagem de objetos
image::../imgs/bolhas-final.png[]

.Saída do programa
image::../imgs/terminal-bolhas.png[]

Vê-se que o algoritmo identificou corretamente o número de bolhas. O algoritmo, entretanto, pode ser otimizado principalmente no tocante à implementação da estrutura Fila.