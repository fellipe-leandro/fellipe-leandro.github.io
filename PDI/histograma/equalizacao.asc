= Equalização de Histogramas
:source-highlighter: pygments
Fellipe Augusto;Jessika Cristina

== Definição do problema
A aplicação a ser desenvolvida deve realizar a EQUALIZAÇÃO do histograma de imagens obtidas por meio de um fluxo de vídeo antes de exibi-las.

== Solução proposta
Primeiro, definiu-se que as imagens obtidas do fluxo de vídeo seriam processadas na escala de cinza, e não nos três canais RGB. Baseando-se no exemplo (link:http://agostinhobritojr.github.io/tutoriais/pdi/#_manipula%C3%A7%C3%A3o_de_histogramas[Tutorial - PDI]) disponibilizado pelo professor, fez-se uso de função do _OpenCV_ que realiza o cálculo da equalização.

.equalize.cpp
[source,cpp]
----
#include <iostream>
#include <opencv2/opencv.hpp>

using namespace std;
using namespace cv;


int main(int argc, char** argv){
  Mat image0,image,dest;
  int width, height;
  VideoCapture cap;
  vector<Mat> planes;
  Mat histOrg, histEq;
  int nbins = 64;
  float range[] = {0, 256};
  const float *histrange = { range };
  bool uniform = true;
  bool acummulate = false;

  cap.open(0);

  if(!cap.isOpened()){
    cout << "cameras indisponiveis";
    return -1;
  }

  width  = cap.get(CV_CAP_PROP_FRAME_WIDTH);
  height = cap.get(CV_CAP_PROP_FRAME_HEIGHT);

  cout << "largura = " << width << endl;
  cout << "altura  = " << height << endl;

  int histw = nbins, histh = nbins/2;
  Mat histImgOrg(histh, histw, CV_8U);
  Mat histImgEq(histh, histw, CV_8U);
  while(1){
    cap >> image0;
    cvtColor(image0,image,CV_BGR2GRAY);
    equalizeHist(image,dest);
    namedWindow("histograma original", CV_WINDOW_AUTOSIZE );
    namedWindow("histograma equalizado", CV_WINDOW_AUTOSIZE );
    calcHist(&image, 1, 0, Mat(), histOrg, 1,
             &nbins, &histrange,
             uniform, acummulate);
    calcHist(&dest, 1, 0, Mat(), histEq, 1,
             &nbins, &histrange,
             uniform, acummulate);
    normalize(histOrg, histOrg, 0, histImgOrg.rows, NORM_MINMAX, -1, Mat());
    normalize(histEq, histEq, 0, histImgEq.rows, NORM_MINMAX, -1, Mat());
    histImgOrg.setTo(Scalar(0));
    histImgEq.setTo(Scalar(0));
    for(int i=0; i<nbins; i++){
      line(histImgOrg,
           Point(i, histh),
           Point(i, histh-cvRound(histOrg.at<float>(i))),
           Scalar(255), 1, 8, 0);
      line(histImgEq,
           Point(i, histh),
           Point(i, histh-cvRound(histEq.at<float>(i))),
           Scalar(255), 1, 8, 0);
	}
    histImgOrg.copyTo(image(Rect(0, 0,nbins, histh)));
    histImgEq.copyTo(dest(Rect(0, 0,nbins, histh)));

    imshow("histograma original",image);
    imshow("histograma equalizado",dest);
	if(waitKey(30) >= 0) break;
  }
  return 0;
}
----
Pode-se ver algumas alterações em relação ao código de referência (inserir link):
[source,cpp]
----
  Mat histImgOrg(histh, histw, CV_8U);
  Mat histImgEq(histh, histw, CV_8U);
----
`histImgOrg` faz referência ao histograma da imagem original, e `histImgEq`, ao histograma da imagem equalizada. Como as imagens processadas estão na escala de cinza, o tipo de dado mudou de `CV8_UC3` para `CV_8U`.
[source,cpp]
----
cvtColor(image0,image,CV_BGR2GRAY);
equalizeHist(image,dest);
----
A função `cvtColor()` converte a imagem capturada de um espaço de cor para outro. Seus parâmetros são:

* Imagem de Entrada
* Imagem de saída
* Código referente à conversão do espaço de cor (na aplicação, do plano RGB para Escala de Cinza)

A função `equalizeHist()`, por sua vez, realiza a equalização do histograma de uma imagem na escala de cinza. Seus parâmetros são:

* Imagem-fonte, com canal único de 8 bits
* Imagem-destino, do mesmo tipo e tamanho que a imagem-fonte

== Resultados e Considerações Finais
O resultado do processo de equalização consiste em uma uniformização nos níveis de cinza da imagem, gerando uma consequente melhora no contraste da imagem.

.Comparativo entre histograma original e histograma equalizado para uma certa imagem do fluxo de vídeo
image::../imgs/hist.png[]

Nessa aplicação, foram usadas pela primeira vez várias funcionalidades do _OpenCV_, dentre as quais:

* Fluxo de vídeo por meio da utilização da classe `VideCapture`
* Uso da função `cvtColor()`
* Uso da função `equalizeHist()`
* Uso da função `CalcHist()`
* Uso da função `normalize()`
* Uso de funcionalidades de desenho, entre elas `line()`





