{
  "_args": [
    [
      {
        "raw": "peterbraden/node-opencv",
        "scope": null,
        "escapedName": null,
        "name": null,
        "rawSpec": "peterbraden/node-opencv",
        "spec": "github:peterbraden/node-opencv",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:peterbraden/node-opencv.git",
          "sshUrl": "git+ssh://git@github.com/peterbraden/node-opencv.git",
          "httpsUrl": "git+https://github.com/peterbraden/node-opencv.git",
          "gitUrl": "git://github.com/peterbraden/node-opencv.git",
          "shortcut": "github:peterbraden/node-opencv",
          "directUrl": "https://raw.githubusercontent.com/peterbraden/node-opencv/master/package.json"
        }
      },
      "/home/fellipe/projeto_final"
    ]
  ],
  "_from": "peterbraden/node-opencv",
  "_id": "opencv@6.0.0",
  "_inCache": true,
  "_location": "/opencv",
  "_phantomChildren": {},
  "_requested": {
    "raw": "peterbraden/node-opencv",
    "scope": null,
    "escapedName": null,
    "name": null,
    "rawSpec": "peterbraden/node-opencv",
    "spec": "github:peterbraden/node-opencv",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:peterbraden/node-opencv.git",
      "sshUrl": "git+ssh://git@github.com/peterbraden/node-opencv.git",
      "httpsUrl": "git+https://github.com/peterbraden/node-opencv.git",
      "gitUrl": "git://github.com/peterbraden/node-opencv.git",
      "shortcut": "github:peterbraden/node-opencv",
      "directUrl": "https://raw.githubusercontent.com/peterbraden/node-opencv/master/package.json"
    }
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "git://github.com/peterbraden/node-opencv.git#fdd0c97a3c349fea3ef7e91dc6435da5f57e237f",
  "_shasum": "f98960508d03492dc8198909a44d6bb1e5311108",
  "_shrinkwrap": null,
  "_spec": "peterbraden/node-opencv",
  "_where": "/home/fellipe/projeto_final",
  "author": {
    "name": "Peter Braden",
    "email": "peterbraden@peterbraden.co.uk"
  },
  "binary": {
    "module_name": "opencv",
    "module_path": "./build/{module_name}/v{version}/{configuration}/{node_abi}-{platform}-{arch}/",
    "remote_path": "./{module_name}/v{version}/{configuration}/",
    "package_name": "{node_abi}-{platform}-{arch}.tar.gz",
    "host": "https://node-opencv.s3.amazonaws.com"
  },
  "bugs": {
    "url": "https://github.com/peterbraden/node-opencv/issues"
  },
  "bundleDependencies": [
    "node-pre-gyp"
  ],
  "dependencies": {
    "buffers": "^0.1.1",
    "istanbul": "0.4.5",
    "nan": "^2.0.9",
    "node-pre-gyp": "^0.6.30"
  },
  "description": "Node Bindings to OpenCV",
  "devDependencies": {
    "aws-sdk": "~2.1.20",
    "glob": "^5.0.3",
    "request": "^2.44.0",
    "tape": "^3.0.0"
  },
  "engines": {
    "node": ">=0.12"
  },
  "gitHead": "fdd0c97a3c349fea3ef7e91dc6435da5f57e237f",
  "homepage": "https://github.com/peterbraden/node-opencv#readme",
  "keywords": [
    "opencv",
    "computer",
    "vision",
    "quadrocopter"
  ],
  "license": "MIT",
  "main": "./lib/opencv",
  "name": "opencv",
  "optionalDependencies": {},
  "readme": "# node-opencv\n\n[![Build Status](https://secure.travis-ci.org/peterbraden/node-opencv.svg)](http://travis-ci.org/peterbraden/node-opencv)\n[![Coverage](http://codecov.io/github/peterbraden/node-opencv/coverage.svg?branch=master)](https://codecov.io/gh/peterbraden/node-opencv)\n\n[OpenCV](http://opencv.org) bindings for Node.js. OpenCV is\nthe defacto computer vision library - by interfacing with it natively in node,\nwe get powerful real time vision in js.\n\nPeople are using node-opencv to fly control quadrocoptors, detect faces from\nwebcam images and annotate video streams. If you're using it for something\ncool, I'd love to hear about it!\n\n## Install\n\nYou'll need OpenCV 2.3.1 or newer installed before installing node-opencv.  Note\nthat OpenCV 3.x is not yet fully supported.\n\n## Specific for macOS\nInstall OpenCV using brew\n```bash\nbrew tap homebrew/science\nbrew install opencv\n```\n\n\n## Specific for Windows\n1. Download and install OpenCV (Be sure to use a 2.4 version) @\nhttp://opencv.org/releases.html\nFor these instructions we will assume OpenCV is put at C:\\OpenCV, but you can\nadjust accordingly.\n\n2. If you haven't already, create a system variable called OPENCV_DIR and set it\n   to C:\\OpenCV\\build\\x64\\vc12\n\n   Make sure the \"x64\" part matches the version of NodeJS you are using.\n\n   Also add the following to your system PATH\n        ;%OPENCV_DIR%\\bin\n\n3. Install Visual Studio 2013. Make sure to get the C++ components.\n   You can use a different edition, just make sure OpenCV supports it, and you\n   set the \"vcxx\" part of the variables above to match.\n\n4. Download peterbraden/node-opencv fork\ngit clone https://github.com/peterbraden/node-opencv\n\n5. run npm install\n\n```bash\n$ npm install opencv\n```\n\n## Examples\nRun the examples from the parent directory.\n\n### Face Detection\n\n```javascript\ncv.readImage(\"./examples/files/mona.png\", function(err, im){\n  im.detectObject(cv.FACE_CASCADE, {}, function(err, faces){\n    for (var i=0;i<faces.length; i++){\n      var x = faces[i]\n      im.ellipse(x.x + x.width/2, x.y + x.height/2, x.width/2, x.height/2);\n    }\n    im.save('./out.jpg');\n  });\n})\n```\n\n\n## API Documentation\n\n### Matrix\n\nThe [matrix](http://opencv.jp/opencv-2svn_org/cpp/core_basic_structures.html#mat) is the most useful\nbase data structure in OpenCV. Things like images are just matrices of pixels.\n\n#### Creation\n\n```javascript\nnew Matrix(rows, cols)\n```\n\nOr if you're thinking of a Matrix as an image:\n\n```javascript\nnew Matrix(height, width)\n```\n\nOr you can use opencv to read in image files. Supported formats are in the OpenCV docs, but jpgs etc are supported.\n\n```javascript\ncv.readImage(filename, function(err, mat){\n  ...\n})\n\ncv.readImage(buffer, function(err, mat){\n  ...\n})\n```\n\nIf you need to pipe data into an image, you can use an ImageDataStream:\n\n```javascript\nvar s = new cv.ImageDataStream()\n\ns.on('load', function(matrix){\n  ...\n})\n\nfs.createReadStream('./examples/files/mona.png').pipe(s);\n```\n\nIf however, you have a series of images, and you wish to stream them into a\nstream of Matrices, you can use an ImageStream. Thus:\n\n```javascript\nvar s = new cv.ImageStream()\n\ns.on('data', function(matrix){\n   ...\n})\n\nardrone.createPngStream().pipe(s);\n```\n\nNote: Each 'data' event into the ImageStream should be a complete image buffer.\n\n\n\n#### Accessing Data\n\n```javascript\nvar mat = new cv.Matrix.Eye(4,4); // Create identity matrix\n\nmat.get(0,0) // 1\n\nmat.row(0)  // [1,0,0,0]\nmat.col(4)  // [0,0,0,1]\n```\n\n##### Save\n\n```javascript\nmat.save('./pic.jpg')\n```\n\nor:\n\n```javascript\nvar buff = mat.toBuffer()\n```\n\n#### Image Processing\n\n```javascript\nim.convertGrayscale()\nim.canny(5, 300)\nim.houghLinesP()\n```\n\n\n#### Simple Drawing\n\n```javascript\nim.ellipse(x, y)\nim.line([x1,y1], [x2, y2])\n```\n\n#### Object Detection\n\nThere is a shortcut method for\n[Viola-Jones Haar Cascade](http://docs.opencv.org/trunk/d7/d8b/tutorial_py_face_detection.html) object\ndetection. This can be used for face detection etc.\n\n```javascript\nmat.detectObject(haar_cascade_xml, opts, function(err, matches){})\n```\n\nFor convenience in face detection, cv.FACE_CASCADE is a cascade that can be used for frontal face detection.\n\nAlso:\n\n```javascript\nmat.goodFeaturesToTrack\n```\n\n#### Contours\n\n```javascript\nmat.findCountours\nmat.drawContour\nmat.drawAllContours\n```\n\n### Using Contours\n\n`findContours` returns a `Contours` collection object, not a native array. This object provides\nfunctions for accessing, computing with, and altering the contours contained in it.\nSee [relevant source code](src/Contours.cc) and [examples](examples/)\n\n```javascript\nvar contours = im.findContours();\n\n// Count of contours in the Contours object\ncontours.size();\n\n// Count of corners(verticies) of contour `index`\ncontours.cornerCount(index);\n\n// Access vertex data of contours\nfor(var c = 0; c < contours.size(); ++c) {\n  console.log(\"Contour \" + c);\n  for(var i = 0; i < contours.cornerCount(c); ++i) {\n    var point = contours.point(c, i);\n    console.log(\"(\" + point.x + \",\" + point.y + \")\");\n  }\n}\n\n// Computations of contour `index`\ncontours.area(index);\ncontours.arcLength(index, isClosed);\ncontours.boundingRect(index);\ncontours.minAreaRect(index);\ncontours.isConvex(index);\ncontours.fitEllipse(index);\n\n// Destructively alter contour `index`\ncontours.approxPolyDP(index, epsilon, isClosed);\ncontours.convexHull(index, clockwise);\n```\n\n#### Face Recognization\n\nIt requires to `train` then `predict`. For acceptable result, the face should be cropped, grayscaled and aligned, I ignore this part so that we may focus on the api usage.\n\n** Please ensure your OpenCV 3.2+ is configured with contrib. MacPorts user may `port install opencv +contrib` **\n\n```javascript\nconst fs = require('fs');\nconst path = require('path');\nconst cv = require('opencv');\n\nfunction forEachFileInDir(dir, cb) {\n  let f = fs.readdirSync(dir);\n  f.forEach(function (fpath, index, array) {\n    if (fpath != '.DS_Store')\n     cb(path.join(dir, fpath));\n  });\n}\n\nlet dataDir = \"./_training\";\nfunction trainIt (fr) {\n  // if model existe, load it\n  if ( fs.existsSync('./trained.xml') ) {\n    fr.loadSync('./trained.xml');\n    return;\n  }\n\n  // else train a model\n  let samples = [];\n  forEachFileInDir(dataDir, (f)=>{\n      cv.readImage(f, function (err, im) {\n          // Assume all training photo are named as id_xxx.jpg\n          let labelNumber = parseInt(path.basename(f).substring(3));\n          samples.push([labelNumber, im]);\n      })\n  })\n\n  if ( samples.length > 3 ) {\n    // There are async and sync version of training method:\n    // .train(info, cb)\n    //     cb : standard Nan::Callback\n    //     info : [[intLabel,matrixImage],...])\n    // .trainSync(info)\n    fr.trainSync(samples);\n    fr.saveSync('./trained.xml');\n  }else {\n    console.log('Not enough images uploaded yet', cvImages)\n  }\n}\n\nfunction predictIt(fr, f){\n  cv.readImage(f, function (err, im) {\n    let result = fr.predictSync(im);\n    console.log(`recognize result:(${f}) id=${result.id} conf=${100.0-result.confidence}`);\n  });\n}\n\n//using defaults: .createLBPHFaceRecognizer(radius=1, neighbors=8, grid_x=8, grid_y=8, threshold=80)\nconst fr = new cv.FaceRecognizer();\ntrainIt(fr);\nforEachFileInDir('./_bench', (f) => predictIt(fr, f));\n```\n\n## Test\n\nUsing [tape](https://github.com/substack/tape). Run with command:\n\n`npm test`.\n\n## Code coverage\n\nUsing [istanbul](http://gotwarlost.github.io/istanbul/) and [lcov](http://ltp.sourceforge.net/coverage/lcov.php). Run with command:\n\n`make cover`\n\nBuild version of `opencv.node` will be generated, and coverage files will be put in `coverage/` directory. These files can be remvoved automatically by running `make clean`.\n\n## MIT License\nThe library is distributed under the MIT License - if for some reason that\ndoesn't work for you please get in touch.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/peterbraden/node-opencv.git"
  },
  "scripts": {
    "build": "node-gyp build",
    "install": "node-pre-gyp install --build-from-source",
    "test": "node test/unit.js"
  },
  "version": "6.0.0"
}
